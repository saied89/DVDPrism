apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'jacoco'

apply plugin: 'io.fabric'

jacoco {
    toolVersion = '0.8.4'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

ext.signing = [
        storeFilePath : 'path/to/keystore',
        storePassword : 'keystore password',
        keyAlias      : 'key alias',
        keyPassword   : 'key password',
]

if (file('../signing.gradle').exists()) {
    apply from: '../signing.gradle'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.saied.dvdprism.app"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 3
        versionName "1.0.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            testCoverageEnabled false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            testCoverageEnabled true
        }
    }

    def isRunningOnTravis = System.getenv("CI") == "true"

    if (isRunningOnTravis) {
        // configure keystore
        signingConfigs.release.storeFile = file("../key.jks")
        signingConfigs.release.storePassword = System.getenv("KEYSTORE_PASSWORD")
        signingConfigs.release.keyAlias = System.getenv("KEY_ALIAS")
        signingConfigs.release.keyPassword = System.getenv("KEYSTORE_PASSWORD")
    } else {
        signingConfigs.release.storeFile = file(signing.storeFilePath)
        signingConfigs.release.storePassword = signing.storePassword
        signingConfigs.release.keyAlias = signing.keyAlias
        signingConfigs.release.keyPassword = signing.storePassword
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed"
                exceptionFormat "full"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    packagingOptions {
        pickFirst 'META-INF/kotlinx-io.kotlin_module'
        pickFirst 'META-INF/atomicfu.kotlin_module'
        pickFirst 'META-INF/kotlinx-coroutines-io.kotlin_module'
    }

    lintOptions {
        abortOnError false
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    def lifecycle_version = '2.0.0'
    def koin_version = '1.0.2'
    def room_version = "2.1.0-alpha04"
    def espresso_version = "3.1.1"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':common-jvm')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    implementation "com.google.android.material:material:1.1.0-alpha02"
    implementation "androidx.recyclerview:recyclerview:1.0.0"

    debugImplementation('androidx.fragment:fragment-testing:1.1.0-alpha03') {
        transitive = false
    }

    ////Room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version" // use kapt for Kotlin
    // optional - Coroutines support for Room
    implementation "androidx.room:room-coroutines:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
    ////

    ////paging
    def paging_version = "2.1.0"

    implementation "androidx.paging:paging-runtime-ktx:$paging_version" // use -ktx for Kotlin
    ////

    implementation 'me.zhanghai.android.materialprogressbar:library:1.6.0'

    //Î›rrow
    api "io.arrow-kt:arrow-core:$arrow_version"

    //coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation 'androidx.core:core-ktx:1.0.1'

    implementation 'com.facebook.fresco:fresco:1.11.0'
    implementation 'me.relex:photodraweeview:2.0.0'

    implementation 'androidx.palette:palette:1.0.0'

    ////Firebase
    // Check for v11.4.2 or higher
    implementation 'com.google.firebase:firebase-core:17.0.1'

    // (Recommended) Add Analytics
    implementation 'com.google.firebase:firebase-analytics:17.0.1'

    // Add dependency
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    ////

    implementation "com.google.firebase:firebase-analytics:17.0.1"

    implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
    testImplementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-jackson:$ktor_version"
    implementation "io.ktor:ktor-client-okhttp:$ktor_version"
    
    

    implementation 'com.afollestad.material-dialogs:core:2.0.0-rc9'

    debugImplementation 'com.facebook.stetho:stetho:1.5.0'

    testImplementation "io.mockk:mockk:$mockK_version"
    androidTestImplementation "io.mockk:mockk-android:$mockK_version"

    ////Lifecycle
    // alternatively - just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version" // use -ktx for Kotlin
    // alternatively - just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - Test helpers for LiveData
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
    androidTestImplementation "androidx.arch.core:core-testing:$lifecycle_version"

    ////Koin
    implementation "org.koin:koin-android:$koin_version"
    // Koin AndroidX Scope feature
    implementation "org.koin:koin-androidx-scope:$koin_version"
    // Koin AndroidX ViewModel feature
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    testImplementation "org.koin:koin-test:$koin_version"
    androidTestImplementation "org.koin:koin-test:$koin_version"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
}

apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin

